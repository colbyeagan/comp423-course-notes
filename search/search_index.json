{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Colby Eagan's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: Colby Eagan</li> <li>Reviewer: Lily Moore</li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git and a GitHub Account.</li> <li>Visual studio code: Download and install it from here.</li> <li>Install Docker here.</li> </ul>"},{"location":"tutorials/go-setup/#creating-your-local-and-remote-repository","title":"Creating your local and remote repository","text":"<ul> <li>Inspiration taken from COMP423 Starting a Static Website tutorial.</li> </ul>"},{"location":"tutorials/go-setup/#a-make-a-directory-to-setup-your-repository","title":"(A) Make a directory to setup your repository","text":"<p>(1) Open the terminal on your computer </p> <p>(2) Create a new directory for your project by using the <code>mkdir</code> command, then switch into your new directory by using the <code>cd</code> command. </p> <pre><code>mkdir comp423-go-tutorial\ncd comp423-go-tutorial\n</code></pre> <p>(3) Initialize a new Git repo:</p> <pre><code>git init\n</code></pre> <p>(4) Create a README.md file <pre><code>echo \"# Tutorial for setting up a go devcontainer and programming in go. https://colbyeagan.github.io/comp423-course-notes/tutorials/go-setup/\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></p>"},{"location":"tutorials/go-setup/#b-create-a-remote-repo-on-github","title":"(B) Create a remote repo on github","text":"<p>(1) Log into GitHub and go to the Create a New Repository tab.</p> <p>(2) Name your repository <code>comp423-go-tutorial</code> and add a description. Make your repository public.</p> <p>(3) Do not initialize with a README.</p> <p>(4) Click on \"Create Repository\".</p>"},{"location":"tutorials/go-setup/#c-next-conect-your-local-and-remote-repo","title":"(C) Next, conect your Local and Remote Repo","text":"<p>(1) Add GitHub repo as remote</p> <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/comp423-go-tutorial.git\n</code></pre> <p>Warning</p> <p>Replace the parts of the link between &lt;&gt; with your username!</p> <p>(2) Push your local commits to the remote repository. Ensure that your primary branch is named main. </p> <pre><code>git push --set-upstream origin main\n</code></pre> <p>Note</p> <p>If there are issues with your repo, use git status and git log to debug.</p>"},{"location":"tutorials/go-setup/#setting-up-the-development-environment","title":"Setting up the Development Environment","text":"<ul> <li>Inspiration taken from COMP423 Starting a Static Website tutorial.</li> </ul> <p>(1) Open the <code>comp423-go-tutorial</code> repository you just made in VS Code. </p> <p>(2) Install \"Dev Containers\" extension for VS Code.</p> <p>(3) Create a <code>.devcontainer</code> directory in the root of your project folder and add the file      <code>.devcontainer/devcontainer.json</code></p> <p>(4) Add the proper contents to the <code>devcontainer.json</code> file <pre><code>{\n    \"name\": \"COMP423 Go Tutorial - Go Development\",\n    \"image\": \"mcr.microsoft.com/devcontainers/go:latest\", \n    \"customizations\": {\n      \"vscode\": {\n        \"settings\": {},\n        \"extensions\": [\n          \"golang.go\" \n        ]\n      }\n    },\n    \"postCreateCommand\": \"go mod init comp423 &amp;&amp; go install\"\n  }\n</code></pre></p> <p><code>name</code> describes the name for your dev container</p> <p><code>image</code> specifies what kind of programming environment to setup for your dev container</p> <p><code>customizations</code> configures VS Code by installing certain language support extensions</p> <p><code>postCreateCommand</code> runs commands after creating the container to install necesarry parts of the dev environment. In this case we wish to add a go mod file to the directory and install go.</p> <p>Go mod subcommand</p> <p>We take care of running <code>go mod</code> in the postCreateCommand. This means the user does not have to worry about creating the <code>go.mod</code> file which manages go dependencies. If you would prefer more control you can remove this command from the postCreateCommand line and run it yourself after creating the dev container.</p> <p>(5) Reopen your project in your devcontainer by pressing <code>f1</code> and typing (and selecting) \"Dev Containers: Reopen in Container\".</p> <p>(6) Run <code>go version</code>. Your terminal should show something like this:</p> <p> </p> <p>Note</p> <p>You may have a different version of go. This tutorial installs the latest version which may change overtime.</p>"},{"location":"tutorials/go-setup/#printing-hello-comp423","title":"Printing \"Hello COMP423\"","text":"<p>Now it is time to create a go file, add the contents for our first go program, and then run it!</p> <p>(1) Begin by creating a <code>main.go</code> file in your main directory (comp423-go-tutorial) </p> <p>(2) In the <code>main.go</code> file, add the contents</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, COMP423!\")\n}\n</code></pre> <p>(3) Save this file and then in your terminal run <pre><code>go run main.go\n</code></pre> Alternativley, we can build and then run our program in two seperate commands.  <pre><code>go build -o &lt;meaningful-output-name&gt; main.go\n./&lt;meaningful-output-name&gt;\n</code></pre></p> <p>go run vs build</p> <p>The go subcommand <code>go build</code> is similar to <code>gcc</code> in the C programming language in that it compiles into an executable binary file which is then run in another step. <code>go run</code> on the other hand compiles into a binary file, runs it immediatley, and then removes this binary executable when the program finishes. This is a useful for running go programs quicly to see the output.</p> <p>Your console should look like this! </p> <p>Note</p> <p>The \"go run\" command compiles and runs in one step!</p>"},{"location":"tutorials/go-setup/#push-your-changes-to-the-remote-repository","title":"Push your changes to the remote repository","text":"<p>(1) Save all files and add your changes <pre><code>git add .\n</code></pre></p> <p>(2) Commit with a meaningful message:</p> <pre><code>git commit -m \"Setup dev container and wrote first go program\"\n</code></pre> <p>(3) Push your changes to the remote repo <pre><code>git push origin main\n</code></pre></p> <p>(4) Go to github and check your remote repo to ensure changes have pushed If changes havent pushed, make sure that your remote url is accurate.</p>"},{"location":"tutorials/go-setup/#conclusion","title":"Conclusion","text":"<p>This is all for now! You have just created a git repo, hosted it on github, made a dev container, configrued it for go, and ran a go program within the container!</p>"},{"location":"tutorials/go-setup/#references","title":"References","text":"<p>[1] K. Jordan, \u201cStarting a static website project with MkDocs,\u201d COMP423, https://comp423-25s.github.io/resources/MkDocs/tutorial/ (accessed Jan. 26, 2025). </p>"}]}